server {
    listen 443 ssl;
    server_name localhost;

    # SSL certificate paths
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    # SSL settings (Optional, improve security)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:...';
    ssl_prefer_server_ciphers on;

    location / {
         # Enable CORS headers
        # Allow all origins or specify a single domain
        add_header Access-Control-Allow-Origin *;  # OR replace * with a specific domain like http://localhost:8083

        # Allow certain HTTP methods and headers
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'Origin, Content-Type, Accept, Authorization';

        # Pre-flight request handling (OPTIONS)
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'Origin, Content-Type, Accept, Authorization';
            add_header Access-Control-Max-Age 1728000;
            return 204;
        }

        proxy_pass http://host.docker.internal:3000/restaurants; # Forward to backend on localhost:3000
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;  # Forward real IP of the client
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward clientâ€™s IP
        proxy_set_header X-Forwarded-Proto $scheme;  # Forward scheme (http/https)
        proxy_cache_bypass $http_upgrade;
    }
}
